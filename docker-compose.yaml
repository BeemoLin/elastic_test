version: "3.9"

networks:
  elastic:
    driver: bridge

volumes:
  elastic:
  elastic-certs:
  kibana:
  logstash-data:

services:
  elastic-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.3
    networks:
      - elastic
    volumes:
      - elastic-certs:/usr/share/elasticsearch/config/certs
    user: "0"  # 運行為root以生成證書
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    command: >
      bash -c '
        # 檢查環境變數
        [ -z "${ELASTIC_PASSWORD}" ] && { echo "ELASTIC_PASSWORD not set"; exit 1; }
        [ -z "${KIBANA_PASSWORD}" ] && { echo "KIBANA_PASSWORD not set"; exit 1; }
        # 生成CA證書
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip -o config/certs/ca.zip -d config/certs;
        fi
        # 生成節點證書
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elastic\n"\
          "    dns:\n"\
          "      - elastic\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip \
            --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip -o config/certs/certs.zip -d config/certs;
        fi
        # 設置權限
        echo "Setting file permissions";
        chown -R root:root config/certs;
        chmod -R 750 config/certs;
        # 等待Elasticsearch啟動
        echo "Waiting for Elasticsearch";
        until curl -s --cacert config/certs/ca/ca.crt https://elastic:9200 | grep -q "missing authentication credentials"; do sleep 10; done;
        # 設置kibana_system密碼
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" \
          -H "Content-Type: application/json" https://elastic:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setup completed!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elastic/elastic.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elastic:
    depends_on:
      elastic-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.3
    container_name: elastic
    networks:
      - elastic
    volumes:
      - elastic-certs:/usr/share/elasticsearch/config/certs
      - elastic:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    environment:
      - node.name=elastic
      - cluster.name=elastic-cluster
      - cluster.initial_master_nodes=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/elastic/elastic.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/elastic/elastic.crt
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/elastic/elastic.key
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/elastic/elastic.crt
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    mem_limit: 2g  # 增加到2GB，1GB可能不足
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped  # 增加重啟策略

  kibana:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.17.3
    container_name: kibana
    networks:
      - elastic
    volumes:
      - elastic-certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    ports:
      - "5601:5601"
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=https://elastic:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate  # 明確SSL驗證模式
    mem_limit: 1g
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  logstash:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:8.17.3
    container_name: logstash
    networks:
      - elastic
    volumes:
      - ./data:/data  # 映射 CSV 資料目錄
      - ./data_pipeline.conf:/usr/share/logstash/pipeline/data_pipeline.conf  # 映射 Logstash 配置
      - elastic-certs:/usr/share/logstash/config/certs  # 映射證書
      - logstash-data:/usr/share/logstash/data
    environment:
      - LS_JAVA_OPTS=-Xms4g -Xmx4g  # 調整 Logstash JVM 記憶體
      - ELASTICSEARCH_HOSTS=https://elastic:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/logstash/config/certs/ca/ca.crt
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate  # 明確SSL驗證模式
      - xpack.monitoring.enabled=false
    mem_limit: 4g
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert /usr/share/logstash/config/certs/ca/ca.crt https://elastic:9200 -u elastic:${ELASTIC_PASSWORD} | grep -q 'cluster_name'"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
